import{_ as n,o as a,c as s,d as e}from"./app-832e5e53.js";const p={},t=e(`<h2 id="_1-语法" tabindex="-1"><a class="header-anchor" href="#_1-语法" aria-hidden="true">#</a> 1.语法</h2><p>对象可以通过两种方式定义：一种是对象字面量形式，一种是构造形式 对象字面量：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> muObject <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">key</span><span class="token operator">:</span> value
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>构造形式的：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> myObject <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
myObject<span class="token punctuation">.</span>key <span class="token operator">=</span> value
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>不管是使用对象字面量形式还是构造形式创建出来的对象都是一样的，唯一的区别是用对象字面量创建的对象可以一次性添加多个键值对，而使用构造形式创建的对象你必须逐个为他添加。另外，直观的来看，对象字面量的方式去创建一个对象显然要比构造形式写法上更简洁。一般我们推荐使用字面量的方式去创建对象。</p><h2 id="_2-类型" tabindex="-1"><a class="header-anchor" href="#_2-类型" aria-hidden="true">#</a> 2.类型</h2><p>对象是JavaScript的基础。在JavaScript中一共有6种主要类型：</p><ul><li>string</li><li>number</li><li>boolean</li><li>null</li><li>undefined</li><li>object</li></ul><p>在JavaScript中还有一些对象子类型，我们称之为复杂基本类型，例如：Function、Array。那么同样的也有基本类型：string、number、boolean、null、undefined</p><h3 id="_2-1内置对象" tabindex="-1"><a class="header-anchor" href="#_2-1内置对象" aria-hidden="true">#</a> 2.1内置对象</h3><p>在JavaScript中是有一些对象子类型的，我们称之为内置对象，这些对象包括：</p><ul><li>String</li><li>Number</li><li>Boolean</li><li>Object</li><li>Function</li><li>Array</li><li>Date</li><li>RegExp</li><li>Error</li></ul><p>这些内置对象实际上可以将他们看做是内置函数，可以当做构造函数(通过new来调用函数)来创建对应的对象。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> myObj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">&#39;string&#39;</span><span class="token punctuation">)</span>
muObj <span class="token comment">// {}</span>
<span class="token keyword">typeof</span>  myObj <span class="token comment">// &quot;object&quot;</span>
<span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span> <span class="token comment">// &#39;[object Object]&#39;</span>
<span class="token comment">// 实际上是调用了Object.toString方法</span>
<span class="token keyword">var</span> str <span class="token operator">=</span> <span class="token string">&quot;hello!&quot;</span>
str<span class="token punctuation">.</span>length <span class="token comment">// 6</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>我们看到，hello!只是一个普通的string字符串，并不是一个对象，那为什么可以对这个字符串进行一些操作，比如获取length长度？</p></blockquote><p>那是因为在必要的时候JavaScript会自动将字符串转为一个对象，不需要显式的去创建一个对象，这样就能访问他的属性和方法了，就会很方便了。 对于number也一样的他会调用new Number()：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token number">13.456</span><span class="token punctuation">.</span><span class="token function">toFixed</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token comment">// 13.46</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>null和undefined没有构造形式，只有文字形式，而Date只有构造没有文字形式</p><h2 id="_3-内容" tabindex="-1"><a class="header-anchor" href="#_3-内容" aria-hidden="true">#</a> 3.内容</h2><h3 id="_3-1对象的内容" tabindex="-1"><a class="header-anchor" href="#_3-1对象的内容" aria-hidden="true">#</a> 3.1对象的内容</h3><blockquote><p>对象的内容是由一些存储在特定命名位置上的值组成的，我们称之为属性。</p></blockquote><p>之前我的理解是对象的内容通常是存在这个对象容器内部的，其实对象内容存的只是对象的属性名称，这个属性名称就像指针一样指向了属性值的真正存储位置。 对象的访问是通过 . 操作符或者[]操作符。. 操作符被称为属性访问，[]操作符称为键访问。他们两访问的是同一个位置，并且返回值也是相同的。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> myObj <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token number">1</span>
<span class="token punctuation">}</span>
myObj<span class="token punctuation">.</span>a <span class="token comment">// 1</span>
myObj<span class="token punctuation">[</span><span class="token string">&#39;a&#39;</span><span class="token punctuation">]</span> <span class="token comment">// 1</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用键访问变量的属性名称可以是一个变量，这样他就是一个动态的了，使用起来也更加灵活一些，而且它可以接受任意utf-8字符串作为属性名；再看属性访问它的属性名需要符合一定的命名规范，例如sub-next用属性访问的方式就不符合规范，这样是不行的，键访问就完全可行。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> myObj <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">b</span><span class="token operator">:</span><span class="token number">2</span>
<span class="token punctuation">}</span>
<span class="token keyword">var</span> val <span class="token operator">=</span> <span class="token string">&#39;b&#39;</span>
myObj<span class="token punctuation">[</span>val<span class="token punctuation">]</span> <span class="token comment">// 2</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在对象中，属性名永远都是一个字符串，即使你传入一个字符串以外的值作为属性名，他也会先你的值转为字符串的。</p><h3 id="_3-2-属性与方法" tabindex="-1"><a class="header-anchor" href="#_3-2-属性与方法" aria-hidden="true">#</a> 3.2. 属性与方法</h3><p>当一个对象的属性返回函数的时候，我们认为这个函数属于对象，其实不然，只不过是对这个函数的引用</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> myObj <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token function-variable function">foo</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;foo&quot;</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">var</span> someFoo <span class="token operator">=</span> myObj<span class="token punctuation">.</span>foo
someFoo <span class="token comment">// Function </span>
myObj<span class="token punctuation">.</span>foo <span class="token comment">// Function</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-3-数组" tabindex="-1"><a class="header-anchor" href="#_3-3-数组" aria-hidden="true">#</a> 3.3. 数组</h3><p>数组也是一个对象，可以通过[]下标来访问数组元素</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span>
arr<span class="token punctuation">.</span>length <span class="token comment">// 4</span>
arr<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token comment">// 4</span>
arr<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">5</span>
arr <span class="token comment">// [1,2,3,4,5]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-5-属性描述符" tabindex="-1"><a class="header-anchor" href="#_3-5-属性描述符" aria-hidden="true">#</a> 3.5. 属性描述符</h3><p>一个对象的属性有对应的属性描述符，比如创建一个普通对象，他的属性描述符会使用默认值。value: 属性值、writable: 可写、enumerable:可枚举、configurable: 可配置。当然，可以用Object.difineProperty()新建一个属性或对属性进行修改。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> myObj <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token number">2</span>
<span class="token punctuation">}</span>
Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>myObj<span class="token punctuation">,</span><span class="token string">&quot;a&quot;</span><span class="token punctuation">,</span><span class="token punctuation">{</span>
  <span class="token literal-property property">value</span><span class="token operator">:</span> <span class="token number">3</span><span class="token punctuation">,</span>
  <span class="token literal-property property">writable</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
  <span class="token literal-property property">enumerable</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
  <span class="token literal-property property">configurable</span><span class="token operator">:</span> <span class="token boolean">true</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
myObj<span class="token punctuation">.</span>a <span class="token comment">// 3</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol><li><p>writable</p><p>如果将writable的值设置为false的话，那么这个对象的属性就是不可写的，对他的修改赋值是不会成功的</p></li></ol><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>myObj<span class="token punctuation">,</span><span class="token string">&quot;a&quot;</span><span class="token punctuation">,</span><span class="token punctuation">{</span>
  <span class="token literal-property property">value</span><span class="token operator">:</span> <span class="token number">3</span><span class="token punctuation">,</span>
  <span class="token literal-property property">writable</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
  <span class="token literal-property property">enumerable</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
  <span class="token literal-property property">configurable</span><span class="token operator">:</span> <span class="token boolean">true</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
myObj<span class="token punctuation">.</span>a <span class="token operator">=</span> <span class="token number">3</span>
myObj<span class="token punctuation">.</span>a <span class="token comment">// 2</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li>configurable</li></ol><p>对象的属性值不可配置，而且他的修改时一个单向操作，可以将true改为false但是无法将false再改为true。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>myObj<span class="token punctuation">,</span><span class="token string">&quot;a&quot;</span><span class="token punctuation">,</span><span class="token punctuation">{</span>
  <span class="token literal-property property">value</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>
  <span class="token literal-property property">writable</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
  <span class="token literal-property property">enumerable</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
  <span class="token literal-property property">configurable</span><span class="token operator">:</span> <span class="token boolean">false</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
myObj<span class="token punctuation">.</span>a <span class="token comment">// 2</span>
<span class="token keyword">delete</span> myObj<span class="token punctuation">.</span>a 
myObj<span class="token punctuation">.</span>a <span class="token comment">// 2</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>上面的代码可以看见deltet对myObj对象属性的删除操作并未成功</p></blockquote><p>3.enumerable enumerable对象属性是否可枚举也就是可遍历的意思。当enumerable设为false时，对于对象的变量，当前这个属性并不会被遍历到</p>`,43),o=[t];function l(c,i){return a(),s("div",null,o)}const u=n(p,[["render",l],["__file","02.html.vue"]]);export{u as default};
